
import os
import logging
import pytz
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from apscheduler.schedulers.background import BackgroundScheduler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")

user_data = {}

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscribers = set()

# –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ —Ä–∞—É–Ω–¥—ã
rounds = {
    1: {"text": "üèù *–†–∞—É–Ω–¥ 1: –ö—É–¥–∞ –ø–æ–µ–¥–µ–º?*\n\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", "choices": ["–û–ª–∞—Ñ", "–ö—É–∑–∫–æ", "–î–∂–∏–Ω–Ω–∏"]},
    2: {"text": "‚úàÔ∏è *–†–∞—É–Ω–¥ 2: –ö—Ç–æ —Ç–µ–±—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç?*\n\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", "choices": ["–ì—É—Ñ–∏", "–í–∞–Ω–∏–ª–æ–ø–∞", "–î–∞–º–±–æ"]},
    3: {"text": "üçΩ *–†–∞—É–Ω–¥ 3: –ì–¥–µ –ø–æ–µ–¥–∏–º?*\n\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", "choices": ["–õ—É–∏", "–ü–∞—Å–∫–∞–ª—å", "–ù–µ–º–æ"]},
    4: {"text": "üèñ *–†–∞—É–Ω–¥ 4: –ö—Ç–æ —É—Å—Ç—Ä–æ–∏—Ç –ø–ª—è–∂–Ω—ã–π —Ö–∞–æ—Å?*\n\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", "choices": ["–¢—Ä–∏—Ç–æ–Ω", "–°—Ç–∏—á", "–í–∏–Ω–Ω–∏-–ü—É—Ö"]},
    5: {"text": "üõ¨ *–†–∞—É–Ω–¥ 5: –ö—Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è —Å —Ç–æ–±–æ–π –¥–æ–º–æ–π?*\n\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", "choices": ["–ü–∏—Ç–µ—Ä –ü—ç–Ω", "–î–æ–Ω–∞–ª—å–¥ –î–∞–∫", "–ú–µ—Ä–∏–¥–∞"]}
}

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    subscribers.add(user_id)
    if user_id not in user_data:
        user_data[user_id] = {"round": 0, "choices": []}
    update.message.reply_text("üéâ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–µ—Ç–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂ Disney! –°–ª–µ–¥–∏ –∑–∞ —Ä–∞—É–Ω–¥–∞–º–∏ –∏ –≤—ã–±–∏—Ä–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π üèñ")

def send_round_to_all(context: CallbackContext):
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    round_schedule = {
        1: datetime(2024, 7, 28, 13, 0, tzinfo=pytz.timezone("Europe/Moscow")),
        2: datetime(2024, 7, 31, 13, 0, tzinfo=pytz.timezone("Europe/Moscow")),
        3: datetime(2024, 8, 3, 13, 0, tzinfo=pytz.timezone("Europe/Moscow")),
        4: datetime(2024, 8, 6, 13, 0, tzinfo=pytz.timezone("Europe/Moscow")),
        5: datetime(2024, 8, 9, 13, 0, tzinfo=pytz.timezone("Europe/Moscow")),
    }
    for round_num, scheduled_time in round_schedule.items():
        if abs((now - scheduled_time).total_seconds()) < 60:
            for user_id in subscribers:
                send_round(user_id, context, round_num)

def send_round(user_id: int, context: CallbackContext, round_num: int):
    round_info = rounds[round_num]
    reply_markup = ReplyKeyboardMarkup([[c] for c in round_info["choices"]], one_time_keyboard=True, resize_keyboard=True)
    img_path = f"images/{round_info['choices'][0]}.jpg"
    context.bot.send_message(chat_id=user_id, text=round_info["text"], reply_markup=reply_markup, parse_mode='Markdown')
    for choice in round_info["choices"]:
        with open(f"images/{choice}.jpg", "rb") as img:
            context.bot.send_photo(chat_id=user_id, photo=img, caption=choice)

def handle_choice(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in user_data:
        update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂!")
        return

    current_round = user_data[user_id]["round"] + 1
    choice = update.message.text.strip()
    if current_round > 5 or choice not in rounds[current_round]["choices"]:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    user_data[user_id]["choices"].append(choice)
    user_data[user_id]["round"] = current_round

    if current_round == 5:
        send_final_story(update, context)

def send_final_story(update: Update, context: CallbackContext):
    choices = user_data[update.message.from_user.id]["choices"]
    story = (
        "üéâ *–¢–≤–æ–π –æ—Ç–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
        f"üìç –ù–∞—á–∞–ª —Å {choices[0]}\n"
        f"‚úàÔ∏è –í –¥–æ—Ä–æ–≥—É —Ç–µ–±—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª {choices[1]}\n"
        f"üçî –¢—ã —Ä–∏—Å–∫–Ω—É–ª –ø–æ–µ—Å—Ç—å —É {choices[2]}\n"
        f"üèñ –ü–ª—è–∂ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª –≤ —Ö–∞–æ—Å {choices[3]}\n"
        f"üõ¨ –î–æ–º–æ–π —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è —Å {choices[4]}\n\n"
        "üì∏ –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å –≤—Å–µ 5 —Å—Ü–µ–Ω –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ —á–∞—Ç–µ!"
    )
    context.bot.send_message(chat_id=update.effective_chat.id, text=story, parse_mode='Markdown')

def main():
    updater = Updater(8125530642:AAEdhoefboJi9aRWoPUWA1AWQxvMP3vef7Y, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_choice))

    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: send_round_to_all(updater.job_queue._dispatcher), 'interval', minutes=1)
    scheduler.start()

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
